let QOper8Worker={handlersByMessageType:new Map,handlers:new Map,id:!1,lastActivityAt:Date.now(),delay:6e4,timer:!1,inactivityLimit:18e4,isActive:!1,toBeTerminated:!1,logging:!1,listeners:new Map,on:function(e,r){this.listeners.has(e)||this.listeners.set(e,r)},off:function(e){this.listeners.has(e)&&this.listeners.delete(e)},emit:function(e,r){if(this.listeners.has(e)){this.listeners.get(e).call(this,r)}}};onmessage=async function(e){function r(e){(e=e||{}).qoper8={finished:!0},postMessage(e),QOper8Worker.emit("finished",e),QOper8Worker.isActive=!1,QOper8Worker.toBeTerminated&&t()}function i(e){QOper8Worker.logging&&console.log(Date.now()+": "+e)}function t(){i("Worker "+QOper8Worker.id+" sending request to shut down");clearInterval(QOper8Worker.timer),postMessage({qoper8:{shutdown:!0}}),QOper8Worker.emit("shutdown_signal_sent")}let o;QOper8Worker.lastActivityAt=Date.now(),QOper8Worker.isActive=!0,QOper8Worker.log=i;let n=e.data;if(n.qoper8&&n.qoper8.init&&void 0!==n.qoper8.id)return QOper8Worker.id=n.qoper8.id,n.qoper8.workerInactivityCheckTime&&(QOper8Worker.delay=n.qoper8.workerInactivityCheckTime),n.qoper8.workerInactivityLimit&&(QOper8Worker.inactivityLimit=n.qoper8.workerInactivityLimit),n.qoper8.handlersByMessageType&&(QOper8Worker.handlersByMessageType=n.qoper8.handlersByMessageType),QOper8Worker.logging=n.qoper8.logging,QOper8Worker.timer=setInterval(function(){let e=Date.now()-QOper8Worker.lastActivityAt;i("Worker "+QOper8Worker.id+" inactive for "+e),i("Inactivity limit: "+QOper8Worker.inactivityLimit),e>QOper8Worker.inactivityLimit&&(QOper8Worker.isActive?(i("Worker "+QOper8Worker.id+" flagged for termination"),QOper8Worker.toBeTerminated=!0):t())},QOper8Worker.delay),i("new worker "+QOper8Worker.id+" started..."),QOper8Worker.emit("started",{id:QOper8Worker.id}),r();if(i("Message received by worker "+QOper8Worker.id+": "+JSON.stringify(n,null,2)),QOper8Worker.emit("received",{message:n}),!n.type&&!n.handlerUrl)return o="No type or handler specified in message sent to worker "+QOper8Worker.id,QOper8Worker.emit("error",o),r({error:o,originalMessage:n});if(!n.type||!QOper8Worker.handlersByMessageType.has(n.type))return i(o="No handler for messages of type "+n.type),QOper8Worker.emit("error",o),r({error:o,originalMessage:n});if(!QOper8Worker.handlers.has(n.type)){let e=QOper8Worker.handlersByMessageType.get(n.type);i("fetching "+e);try{let{handler:t}=await import(e);QOper8Worker.handlers.set(n.type,t),QOper8Worker.emit("handler_imported",{handlerUrl:e})}catch(t){return i(o="Unable to load Handler Url "+e),i(JSON.stringify(t,null,2)),QOper8Worker.emit("error",o),r({error:o,originalMessage:n,workerId:QOper8Worker.id})}}QOper8Worker.handlers.get(n.type).call(QOper8Worker,n,r)};